
server.port=8200
java.runtime.version=11
spring.application.name=product-service
#spring.security.oauth2.resourceserver.opaquetoken.client-id=
#spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=http://localhost:9191/oauth/check_token


#MongoDB configuration
#spring.data.mongodb.uri=mongodb://localhost:27017/product-service

#Eureka Configuration
eureka.client.serviceUrl.defaultZone  = http://localhost:8761/eureka
eureka.client.hostname = localhost
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true


#Global DB Config
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.format_sql=true
spring.jpa.properties.dialect=org.hibernate.dialect.SQLServer2012Dialect

#MySql DB Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/ecom_service_db
spring.datasource.username=root
spring.datasource.password=root



#AZURE configuration
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect
#spring.datasource.url=jdbc:sqlserver://jewelcsebu045.database.windows.net:1433;database=product-service;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30;
#spring.datasource.username=jewelcse045
#spring.datasource.password=Jewel@1234

## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB

## File Storage Properties
# All files uploaded through the REST API will be stored in this directory
file.upload-dir=/uploads

#live-reload-config
spring.devtools.livereload.enabled=true
